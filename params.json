{"name":"XPRMNTL","tagline":"Experiments as a Service","body":"# ![XPRMNTL](/images/ghLogo.png)\r\nXPRMNTL (read \"Experimental\") is an application of [Code-based Feature Flags](http://en.wikipedia.org/wiki/Feature_toggle) with a web-based configuration via a dashboard and API.\r\n\r\n### Why is this a thing?\r\nXPRMNTL exists for a number of problems that needed a solution:\r\n\r\n1. Feature Flags (Intra-documentationally referred to as \"Experiment\" or \"feature\")\r\n  - Gain: Allows us to keep all code in \"master\" without it being \"client-facing\"\r\n  - Alternative: version control branches\r\n2. For distributed systems\r\n  - Gain: Allows us to keep all of our instances in sync, where memory is not shared\r\n  - Alternative: a file in the repository that all components use for building\r\n3. That can be quickly changed\r\n  - Gains:\r\n    - Allows rapid enabling/disabling of features (rapid roll-backs on error)\r\n    - Allows gradual scaling that isn't heart-breakingly slow\r\n  - Alternatives:\r\n    - Deploy for changes (5 - 90min)\r\n    - Environment variables for experiments\r\n4. By non-technical people (optionally)\r\n  - Gain: Allows us to wrap metrics around our experiences and allow product ownership to deliver\r\n  - Alternatives:\r\n    - Developer-only configuration and deployment\r\n    - Roll-out meetings\r\n    - After-hours development emergencies for roll-backs\r\n  - Warnings:\r\n    - Make sure testing is done and monitoring is in place if development isn't involved in delivery\r\n    - This is not a use-case for technical replacements (db replacements, etc), but may be for lean startup methodologies of \"Build-Measure-Learn\"\r\n\r\n## Components\r\n\r\n### Dashboard & API\r\nThe [XPRMNTL dashboard](https://github.com/XPRMNTL/feature) is a UI for the API, which allows you to:\r\n\r\n1. Select Github repositories to add to Experiments\r\n2. Modify experiment configuration\r\n\r\nThe current implementation requires a Github Organization with repositories for the code and uses Github's OAuth2 strategies for authentication/authorization.\r\n\r\n### Clients\r\nThe XPRMNTL client is a language-specific client for \"announcing\" your experiment configuration and getting back your experiment settings.\r\n\r\n\r\nBelow is a list of available clients. We'd love to see more...\r\n\r\n1. [Node.js Client](https://github.com/XPRMNTL/feature-client)\r\n2. [Go-lang Client](https://github.com/XPRMNTL/xprmntl2go)\r\n\r\n\r\n### Plugins\r\nPlugins are for the preferred method of adding additional functionality to either the client ~~or the dashboard (future)~~\r\nHere is a list of the current ones:\r\n\r\n1. [xpr-express](https://github.com/XPRMNTL/xpr-express.js)\r\n  - Plugin for Node.js Client\r\n  - Adds some [Express](https://github.com/strongloop/express) middleware.\r\n2. [xpr-toggle](https://github.com/XPRMNTL/xpr-toggle.js)\r\n  - Plugin for Node.js client, piggy-backs off xpr-exress, as well. Not tested without (volunteers?)\r\n  - Adds a UI toggler to enable/disable features on a per-user basis.\r\n3. [xpr-angular](https://github.com/XPRMNTL/xpr-angular.js)\r\n  - Plugin for xpr-toggle\r\n  - Angular Directive for toggling HTML elements when features are enabled\r\n\r\n\r\n### Example App\r\nIf you'd like some inspiration implementing XPRMNTL in your own apps, feel free to have a look at the [Example App](https://github.com/XPRMNTL/feature-app). I currently use it for testing and building new functionality as well, so I'm sorry if I break something for you. It should be stable, at least, at any point.]","google":"UA-48272307-2","note":"Don't delete this file! It's used internally to help with page regeneration."}